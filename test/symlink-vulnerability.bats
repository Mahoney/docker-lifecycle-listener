#!/usr/bin/env ./libs/bats/bin/bats

load '../docker-lifecycle-listener.sh'

execute_if_secure() {
  local script="$1"
  if root_is_owner_of "$script" && only_owner_can_write_to "$script"; then
    "$script"
  else
    exit 1
  fi
}

@test "recognise that non-root can change an executable" {
  skip

  local prefix; prefix=$(mktemp -d)
  local service_name="script_provider"
  local script_name="script1.sh"

  local script_dir="$prefix/etc/scripts_to_run"
  mkdir -p "$script_dir"
  sudo chown root "$script_dir"
  sudo chmod gu-w "$script_dir"

  mkdir -p "$prefix/opt"

  local uninstalled="$prefix/Cellar/$service_name"
  mkdir -p "$uninstalled"

  local actual_script="$uninstalled/$script_name"
  echo 'echo safe code' > "$actual_script"
  chmod +x "$actual_script"
  sudo chown root "$actual_script"
  sudo chmod gu-w "$actual_script"

  local installed="$prefix/opt/$service_name"
  ln -s "$uninstalled" "$installed"
  sudo ln -s "$installed/$script_name" "$script_dir/$script_name"

  run execute_if_secure "$script_dir/$script_name"
  test "$status" -eq 0
  test "$output" = 'safe code'

  local malicious="$prefix/malicious/$service_name"
  mkdir -p "$malicious"
  local malicious_script="$malicious/$script_name"
  echo 'echo malicious code' > "$malicious_script"
  chmod +x "$malicious_script"
  sudo chown root "$malicious_script"
  sudo chmod gu-w "$malicious_script"

  rm "$installed"
  ln -s "$malicious" "$installed"

  run execute_if_secure "$script_dir/$script_name"
  test "$status" -eq 0
  test "$output" = 'malicious code'
}
